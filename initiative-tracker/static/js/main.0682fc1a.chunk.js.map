{"version":3,"sources":["Tracker-single.js","Tracker.js","App.js","serviceWorker.js","index.js"],"names":["TrackerSingle","useState","isLocked","setLocked","Form","Row","className","InputGroup","Prepend","Text","icon","Control","disabled","placeholder","Append","Button","onClick","Tracker","initiativeList","state","initList","addNewInitiative","bind","clearAll","lockAll","this","push","setState","Col","class","variant","React","Component","library","add","faBars","faLock","faUnlock","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uZA+BeA,MArBf,WAA0B,IAAD,EACOC,oBAAS,GADhB,mBAChBC,EADgB,KACNC,EADM,KAEvB,OACE,4BACE,kBAACC,EAAA,EAAKC,IAAN,CAAUC,UAAU,kBAClB,kBAACC,EAAA,EAAD,CAAYD,UAAU,QACtB,kBAACC,EAAA,EAAWC,QAAZ,KACE,kBAACD,EAAA,EAAWE,KAAZ,CAAiBH,UAAU,aAAY,kBAAC,IAAD,CAAiBI,KAAK,WAE7D,kBAACN,EAAA,EAAKO,QAAN,CAAcC,SAAUV,EAAUW,YAAY,cAC9C,kBAACT,EAAA,EAAKO,QAAN,CAAcC,SAAUV,EAAUW,YAAY,eAC9C,kBAACN,EAAA,EAAWO,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMb,GAAWD,KAAYA,EAAW,kBAAC,IAAD,CAAiBQ,KAAK,WAAc,kBAAC,IAAD,CAAiBA,KAAK,eCuChHO,E,YAnDb,aAAe,IAAD,8BACZ,+CAEKC,eAAiB,CAAC,kBAAC,EAAD,OAEvB,EAAKC,MAAQ,CACXC,SAAW,EAAKF,gBAGlB,EAAKG,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBAXH,E,gFAcZG,KAAKP,eAAeQ,KAAK,kBAAC,EAAD,OACzBD,KAAKE,SAAS,CACZP,SAAUK,KAAKP,mB,iCAKjBO,KAAKP,eAAiB,GACtBO,KAAKE,SAAS,CACZP,SAAUK,KAAKP,mB,kEAOjB,OACE,yBAAKZ,UAAU,WACb,kBAACD,EAAA,EAAD,KACE,kBAACuB,EAAA,EAAD,KACE,kBAACxB,EAAA,EAAD,CAAME,UAAU,gBACd,wBAAIuB,MAAM,mBACPJ,KAAKP,gBAER,kBAACH,EAAA,EAAD,CAAQe,QAAQ,YAAYxB,UAAU,UAAUU,QAASS,KAAKJ,kBAA9D,sBACA,kBAACN,EAAA,EAAD,CAAQe,QAAQ,SAASxB,UAAU,YAAYU,QAASS,KAAKF,UAA7D,aACA,kBAACR,EAAA,EAAD,CAAQe,QAAQ,UAAUxB,UAAU,WAAWU,QAASS,KAAKD,SAA7D,oB,GAzCQO,IAAMC,W,gBCC5BC,IAAQC,IAAIC,IAAQC,IAAQC,KAkBbC,MAhBf,WACE,OACE,yBAAKhC,UAAU,cACf,kBAACiC,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,KACE,kBAACuB,EAAA,EAAD,0BAEE,6BACA,kBAAC,EAAD,WCRUY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0682fc1a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './tracker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n//import { Draggable } from 'react-beautiful-dnd';\n//import { Transition } from 'react-transition-group';\n\nfunction TrackerSingle() {\n  const [isLocked, setLocked] = useState(false);\n  return (\n    <li>\n      <Form.Row className=\"tracker-single\">\n        <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend >\n          <InputGroup.Text className=\"drag-icon\"><FontAwesomeIcon icon=\"bars\" /></InputGroup.Text>\n        </InputGroup.Prepend>\n          <Form.Control disabled={isLocked} placeholder=\"Character\" />\n          <Form.Control disabled={isLocked} placeholder=\"Initiative\" />\n          <InputGroup.Append>\n            <Button onClick={() => setLocked(!isLocked)}>{isLocked ? <FontAwesomeIcon icon=\"unlock\" /> : <FontAwesomeIcon icon=\"lock\" />}</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form.Row>\n    </li>\n  );\n}\n\n\nexport default TrackerSingle;\n","import React from 'react';\nimport './tracker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport TrackerSingle from './Tracker-single.js';\nimport Button from 'react-bootstrap/Button';\n\nclass Tracker extends React.Component {\n  constructor() {\n    super();\n\n    this.initiativeList = [<TrackerSingle />];\n\n    this.state = {\n      initList : this.initiativeList\n    }\n\n    this.addNewInitiative = this.addNewInitiative.bind(this);\n    this.clearAll = this.clearAll.bind(this);\n    this.lockAll = this.lockAll.bind(this);\n  }\n  addNewInitiative() {\n    this.initiativeList.push(<TrackerSingle/>);\n    this.setState({\n      initList: this.initiativeList\n    });\n\n  }\n  clearAll() {\n    this.initiativeList = [];\n    this.setState({\n      initList: this.initiativeList\n    });\n  }\n  lockAll() {\n\n  }\n  render() {\n    return (\n      <div className=\"tracker\">\n        <Row>\n          <Col>\n            <Form className=\"tracker-form\">\n              <ul class=\"initiative-list\">\n                {this.initiativeList}\n              </ul>\n              <Button variant=\"secondary\" className=\"add-new\" onClick={this.addNewInitiative}>Add New Initiative</Button>\n              <Button variant=\"danger\" className=\"clear-all\" onClick={this.clearAll}>Clear All</Button>\n              <Button variant=\"success\" className=\"lock-all\" onClick={this.lockAll}>Lock All</Button>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\n\n\nexport default Tracker;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tracker from './Tracker.js';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faBars, faLock, faUnlock } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faBars, faLock, faUnlock);\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n    <Container >\n      <Row>\n        <Col>\n          Initiative Tracker\n          <hr />\n          <Tracker/>\n        </Col>\n      </Row>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}