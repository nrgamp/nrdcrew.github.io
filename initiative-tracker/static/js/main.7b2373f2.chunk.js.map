{"version":3,"sources":["Tracker-single.js","Tracker.js","App.js","serviceWorker.js","index.js"],"names":["TrackerSingle","state","isLocked","init","setLocked","bind","inverse","this","setState","Form","Row","InputGroup","className","Prepend","Text","draggable","onDragStart","e","props","index","onDragEnd","icon","Control","disabled","placeholder","Append","Button","onClick","React","Component","Tracker","onDragOver","draggedOverItem","initList","draggedItem","item","filter","splice","idx","dataTransfer","effectAllowed","setData","target","closest","setDragImage","draggedIdx","nextPlayer","initiativeList","currentPlayer","shift","push","count","addNewInitiative","clearAll","Col","class","map","key","variant","library","add","faBars","faLock","faUnlock","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b2373f2.chunk.js","sourcesContent":["import React from 'react';\nimport './tracker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass TrackerSingle extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n    isLocked : false,\n    init: 0\n    };\n    this.setLocked = this.setLocked.bind(this);\n  }\n  setLocked () {\n    const inverse = !this.state.isLocked;\n    this.setState({\n      isLocked : inverse\n    });\n  }\n  \n  render() {\n    return (\n        <Form.Row>\n          <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend >\n            <InputGroup.Text className=\"drag-icon\" draggable onDragStart={e => this.props.onDragStart(e, this.props.index)} onDragEnd={this.props.onDragEnd}><FontAwesomeIcon icon=\"bars\" /></InputGroup.Text>\n          </InputGroup.Prepend>\n            <Form.Control disabled={this.state.isLocked} placeholder=\"Character\" />\n            <Form.Control disabled={this.state.isLocked} placeholder=\"Initiative\" />\n            <InputGroup.Append>\n              <Button onClick={this.setLocked}>{this.state.isLocked ? <FontAwesomeIcon icon=\"unlock\" /> : <FontAwesomeIcon icon=\"lock\" />}</Button>\n            </InputGroup.Append>\n          </InputGroup>\n        </Form.Row>\n    );\n  }\n}\n\n\nexport default TrackerSingle;\n","import React from 'react';\nimport './tracker.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport TrackerSingle from './Tracker-single.js';\nimport Button from 'react-bootstrap/Button';\n\nclass Tracker extends React.Component {\n  constructor() {\n    super();\n\n    this.initiativeList = [-1];\n    this.count = 0;\n\n    this.state = {\n      initList : this.initiativeList\n    }\n\n    this.addNewInitiative = this.addNewInitiative.bind(this);\n    this.clearAll = this.clearAll.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.nextPlayer = this.nextPlayer.bind(this);\n    this.onDragOver = this.onDragOver.bind(this);\n  }\n  addNewInitiative() {\n    this.initiativeList.push(this.count++);\n    this.setState({\n      initList: this.initiativeList,\n    });\n\n  }\n  clearAll() {\n    this.initiativeList = [];\n    this.setState({\n      initList: this.initiativeList\n    });\n  }\n  onDragOver = index => {\n    const draggedOverItem = this.state.initList[index];\n    //alert(draggedOverItem);\n\n    // if the item is dragged over itself, ignore\n    if (this.draggedItem  === draggedOverItem) {\n      return;\n    }\n\n    // filter out the currently dragged item\n    let item = this.state.initList.filter(item => item !== this.draggedItem );\n\n    // add the dragged item after the dragged over item\n    item.splice(index, 0, this.draggedItem );\n\n    this.setState({ initList: item });\n  }\n  onDragStart = (e, idx) => {\n    this.draggedItem = this.state.initList[idx];\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setData(\"text/html\", e.target.closest('.tracker-single'));\n    e.dataTransfer.setDragImage(e.target.closest('.tracker-single'), 20, 20);\n  }\n\n  onDragEnd = () => {\n    this.draggedIdx = null;\n  }\n  nextPlayer = () => {\n    this.initiativeList = this.state.initList;\n    const currentPlayer = this.initiativeList.shift();\n    this.initiativeList.push(currentPlayer);\n    this.setState({\n      initList: this.initiativeList\n    })\n  }\n  render() {\n    return (\n      <div className=\"tracker\">\n        <Row>\n          <Col>\n            <Form className=\"tracker-form\">\n              <ul class=\"initiative-list\">\n                {this.state.initList.map((item, idx) => (\n                  <li key={item} className=\"tracker-single\" onDragOver={() => this.onDragOver(idx)}>\n                    {<TrackerSingle index={idx} onDragStart={this.onDragStart} onDragEnd={this.onDragEnd} />}\n                  </li>\n                ))}\n              </ul>\n              <div class=\"utility-buttons\">\n                <Button variant=\"secondary\" className=\"add-new\" onClick={this.addNewInitiative}>Add New Initiative</Button>\n                <Button variant=\"danger\" className=\"clear-all\" onClick={this.clearAll}>Clear All</Button>\n                <Button variant=\"success\" className=\"next-player\" onClick={this.nextPlayer}>Next Player</Button>\n              </div>\n            </Form>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\n\n\nexport default Tracker;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Tracker from './Tracker.js';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faBars, faLock, faUnlock } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faBars, faLock, faUnlock);\n\nfunction App() {\n  return (\n    <div className=\"App-header\">\n    <Container >\n      <Row>\n        <Col>\n          Initiative Tracker\n          <hr />\n          <Tracker/>\n        </Col>\n      </Row>\n    </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}